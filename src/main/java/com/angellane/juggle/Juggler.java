package com.angellane.juggle;

import java.io.IOException;
import java.lang.module.*;
import java.lang.reflect.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Juggler {
    private final ResolvingURLClassLoader loader;
    private final Collection<Class<?>> classesToSearch;
    private final List<String> importedPackageNames;

    public Juggler(List<String> jars, List<String> mods, List<String> importedPackageNames) {
        this.importedPackageNames = importedPackageNames;

        URL[] urls = jars.stream()
                .flatMap(path -> {
                    try {
                        return Stream.of(Paths.get(path).toUri().toURL());
                    } catch (MalformedURLException ex) {
                        return Stream.empty();
                    }
                })
                .toArray(URL[]::new);

        loader = new ResolvingURLClassLoader(urls);

        var boot = ModuleLayer.boot();

        Configuration conf = boot.configuration().resolve(
                ModuleFinder.ofSystem(),
                ModuleFinder.of(Path.of(".")),
                mods);

        var moduleClassesStream = mods.stream()
                .flatMap(s -> classesForModule(conf, s).stream());

        var baseClassesStream = classesForModule(conf, "java.base").stream();

        Stream<Class<?>> jarClassesStream = jars.stream()
          .flatMap(jarName -> classesInJar(jarName).stream())
          .flatMap(className -> {
              try {
                  Class<?> cls = loader.loadClass(className);
                  loader.linkClass(cls);
                  return Stream.of(cls);
              } catch (ClassNotFoundException ex) {
                  System.err.println("Warning: class " + className + " not found");
                  return Stream.empty();
              } catch (NoClassDefFoundError e) {
                  // This might be thrown if the class file references other classes that can't be loaded.
                  // Maybe it depends on another JAR that hasn't been specified on the command-line with -j.
                  System.err.println("*** Ignoring class " + className + ": " + e);
                  return Stream.empty();
              }
          });

        classesToSearch = Stream.of(baseClassesStream, moduleClassesStream, jarClassesStream)
                .flatMap(Function.identity())
                .collect(Collectors.toList());
    }

    private static final String CLASS_SUFFIX = ".class";
    private static final String MODULE_INFO  = "module-info";

    // Returns list of class names within a JAR.  Note: these class names might not be valid Java identifiers,
    // especially in the case of inner classes or JAR files generated by something other than the Java compiler.
    public List<String> classesInJar(String filename) {
        try (JarFile file = new JarFile(filename)) {
            return file.stream()
                    .filter(Predicate.not(JarEntry::isDirectory))
                    .map(JarEntry::getName)
                    .filter(s -> s.endsWith(CLASS_SUFFIX))
                    .map(s -> s.substring(0, s.length() - CLASS_SUFFIX.length()))
                    .map(s -> s.replace('/', '.'))
                    .collect(Collectors.toList());
        } catch (IOException e) {
            System.err.println("Couldn't read JAR file: " + filename + "; ignoring.");
            return Collections.emptyList();
        }
    }

    public List<Class<?>> classesForModule(Configuration conf, String moduleName) {
        Optional<ResolvedModule> maybeMod = conf.findModule(moduleName);

        if (maybeMod.isEmpty())
            System.err.println("Warning: couldn't find module " + moduleName);
        else {
            try (ModuleReader reader = maybeMod.get().reference().open()) {
                return reader.list()
                        .filter(s -> s.endsWith(CLASS_SUFFIX))
                        .map(s -> s.substring(0, s.length() - CLASS_SUFFIX.length()))
                        .filter(s -> !s.equals(MODULE_INFO))
                        .map(s -> s.replace('/', '.'))
                        .map(s -> {
                            try { return loader.loadClass(s); }
                            catch (ClassNotFoundException x) {
                                System.err.println("Couldn't load: " + s);
                                return null;
                            }
                        })
                        .filter(Objects::nonNull)
                        .collect(Collectors.toList());
            }
            catch (IOException e) {
                System.err.println("Warning: error opening module " + moduleName);
            }
        }
        return List.of();
    }

    public Class<?> classForTypename(String typename) {
        final String ARRAY_SUFFIX = "[]";

        // If this is an array, work out how many dimensions are involved.
        int arrayDimension;
        for (arrayDimension = 0; typename.endsWith(ARRAY_SUFFIX); ++arrayDimension)
            typename = typename.substring(0, typename.length() - ARRAY_SUFFIX.length()).stripTrailing();

        // TODO: think about Generics

        // Start with the base type
        Class<?> ret = null;
        switch (typename) {
            case "void":        ret = Void.TYPE;        break;
            case "boolean":     ret = Boolean.TYPE;     break;
            case "char":        ret = Character.TYPE;   break;
            case "byte":        ret = Byte.TYPE;        break;
            case "short":       ret = Short.TYPE;       break;
            case "int":         ret = Integer.TYPE;     break;
            case "long":        ret = Long.TYPE;        break;
            case "float":       ret = Float.TYPE;       break;
            case "double":      ret = Double.TYPE;      break;
            default:
                // Actually now want to try typename plainly, then prefixed by each import in turn
                // Default to Object if we can't find any match
                for (var prefix : Stream.of(Stream.of(""), importedPackageNames.stream().map(i -> i + "."))
                                .flatMap(Function.identity())
                                .collect(Collectors.toList()))
                    try {
                        ret = loader.loadClass(prefix + typename);
                        break;
                    } catch (ClassNotFoundException e) { /* try next iter */ }

                if (ret == null) {
                    // If we get here, the class wasn't found, either naked or with any imported package prefix
                    Class<?> defaultType = Object.class;

                    System.err.println("Warning: couldn't find class: " + typename
                            + "; using " + defaultType + " instead");
                    ret = defaultType;
                }
        }

        // Now add the array dimension
        for ( ; arrayDimension > 0; --arrayDimension)
            ret = ret.arrayType();

        return ret;
    }

    public Member[] findMembers(Accessibility minAccess, TypeSignature query) {
        // Fields
        Stream<CandidateMember> fieldStream = classesToSearch.stream()
                .flatMap(c -> Arrays.stream(c.getDeclaredFields())
                        .map(CandidateMember::membersFromField)
                        .flatMap(List::stream));

        // Constructors are like static methods returning an item of their declaring class
        Stream<CandidateMember> ctorStream = classesToSearch.stream()
                .flatMap(cls -> Arrays.stream(cls.getDeclaredConstructors())
                        .map(CandidateMember::memberFromConstructor));

        // Methods
        Stream<CandidateMember> methodStream = classesToSearch.stream()
                .flatMap(c -> Arrays.stream(c.getDeclaredMethods())
                        .map(CandidateMember::memberFromMethod));

        return Stream.of(fieldStream, ctorStream, methodStream)
                .flatMap(Function.identity())
                .filter(m -> {      // Anonymous and local classes are unutterable anyway
                    Class<?> c = m.getMember().getDeclaringClass();
                    return !c.isAnonymousClass() && !c.isLocalClass();
                })
                .filter(m -> query.paramTypes == null || m.matchesParams(query.paramTypes, true))
                .filter(m -> query.returnType == null || m.matchesReturn(query.returnType))
                .map(CandidateMember::getMember)
                .distinct()
                .filter(m -> Accessibility.fromModifiers(m.getModifiers()).isAtLastAsAccessibleAsOther(minAccess))
                .toArray(Member[]::new);
    }
}
