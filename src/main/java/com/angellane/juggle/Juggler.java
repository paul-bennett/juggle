package com.angellane.juggle;

import java.io.IOException;
import java.lang.module.Configuration;
import java.lang.module.ModuleFinder;
import java.lang.module.ModuleReader;
import java.lang.module.ResolvedModule;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Path;
import java.util.*;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Juggler {
    private static final String CLASS_SUFFIX = ".class";
    private static final String MODULE_INFO  = "module-info";

    private Configuration modConf;
    private ResolvingURLClassLoader loader;
    private final List<String> importedPackageNames = new ArrayList<>();

    // Sources
    private final List<String> jarNames = new ArrayList<>();
    private final List<String> modNames = new ArrayList<>();

    public Juggler() {
        importedPackageNames.add(Object.class.getPackageName());    // "java.lang" is always imported

    }

    public Collection<Class<?>> getClassesToSearch() {
        URL[] urls = jarNames.stream()
                .flatMap(path -> {
                    try {
                        return Stream.of(Path.of(path).toUri().toURL());
                    } catch (MalformedURLException ex) {
                        return Stream.empty();
                    }
                })
                .toArray(URL[]::new);

        this.loader = new ResolvingURLClassLoader(urls);

        if (modNames.isEmpty())
            modNames.add(Object.class.getModule().getName());       // "java.base"

        this.modConf = ModuleLayer.boot().configuration().resolve(
                ModuleFinder.ofSystem(),
                ModuleFinder.of(Path.of(".")),
                modNames);

        return Stream.of( modNames.stream().flatMap(this::moduleClassStream)
                        , jarNames.stream().flatMap(this::jarClassStream)
                        )
                .flatMap(Function.identity())
                .collect(Collectors.toList());
    }

    public void addJarName(String jarName)          { jarNames.add(jarName); }
    public List<String> getJarNames()               { return jarNames; }
    public void addModuleName(String modName)       { modNames.add(modName);}
    public List<String> getModuleNames()            { return modNames; }
    public void addImportedPackageName(String name) { importedPackageNames.add(name); }
    public List<String> getImportedPackageNames()   { return importedPackageNames; }


    // Returns stream of class names within a JAR.  Note: these class names might not be valid Java identifiers,
    // especially in the case of inner classes or JAR files generated by something other than the Java compiler.
    public Stream<Class<?>> jarClassStream(String filename) {
        try (JarFile file = new JarFile(filename)) {
            return file.stream()
                    .filter(Predicate.not(JarEntry::isDirectory))
                    .map(JarEntry::getName)
                    .filter(s -> s.endsWith(CLASS_SUFFIX))
                    .map(s -> s.substring(0, s.length() - CLASS_SUFFIX.length()))
                    .map(s -> s.replace('/', '.'))
                    .map(this::loadClassByName)
                    .flatMap(Optional::stream)
                    // Collect & create a new stream now so that the JAR file is read before it's closed
                    .collect(Collectors.toList()).stream();
        } catch (IOException e) {
            System.err.println("Couldn't read JAR file: " + filename + "; ignoring.");
            return Stream.empty();
        }
    }

    public Stream<Class<?>> moduleClassStream(String moduleName) {
        Optional<ResolvedModule> maybeMod = this.modConf.findModule(moduleName);

        if (maybeMod.isEmpty())
            System.err.println("Warning: couldn't find module " + moduleName);
        else {
            try (ModuleReader reader = maybeMod.get().reference().open()) {
                return reader.list()
                        .filter(s -> s.endsWith(CLASS_SUFFIX))
                        .map(s -> s.substring(0, s.length() - CLASS_SUFFIX.length()))
                        .filter(s -> !s.equals(MODULE_INFO))
                        .map(s -> s.replace('/', '.'))
                        .map(this::loadClassByName)
                        .flatMap(Optional::stream);
            }
            catch (IOException e) {
                System.err.println("Warning: error opening module " + moduleName);
            }
        }
        return Stream.empty();
    }

    private Optional<Class<?>> loadClassByName(String className) {
        try {
            Class<?> cls = loader.loadClass(className);
            loader.linkClass(cls);
            return Optional.of(cls);
        } catch (ClassNotFoundException ex) {
            return Optional.empty();
        } catch (NoClassDefFoundError e) {
            // This might be thrown if the class file references other classes that can't be loaded.
            // Maybe it depends on another JAR that hasn't been specified on the command-line with -j.
            System.err.println("*** Ignoring class " + className + ": " + e);
            return Optional.empty();
        }
    }

    private static final Map<String, Class<?>> primitiveMap = Stream.of(
                        Void.TYPE, Boolean.TYPE, Character.TYPE,
                        Byte.TYPE, Short.TYPE, Integer.TYPE, Long.TYPE,
                        Float.TYPE, Double.TYPE
                    )
                    .collect(Collectors.toMap(Class::getTypeName, Function.identity()));

    public Class<?> classForTypename(String typename) {
        final String ARRAY_SUFFIX = "[]";

        // If this is an array, work out how many dimensions are involved, and strip []s from typename
        int arrayDimension;
        String baseTypename = typename;
        for (arrayDimension = 0; baseTypename.endsWith(ARRAY_SUFFIX); ++arrayDimension)
            baseTypename = baseTypename.substring(0, baseTypename.length() - ARRAY_SUFFIX.length()).stripTrailing();

        // Start with the base type
        Juggler juggler = this;
        Class<?> ret = primitiveMap.computeIfAbsent(baseTypename,
                name -> {
                    // Actually now want to try typename plainly, then prefixed by each import in turn
                    // Default to Object if we can't find any match
                    Optional<Class<?>> opt =
                            Stream.of(Stream.of(""), importedPackageNames.stream().map(pkg -> pkg + "."))
                                    .flatMap(Function.identity())
                                    .map(prefix -> prefix + name)
                                    .map(n -> juggler.loadClassByName(n))
                                    .flatMap(Optional::stream)
                                    .findFirst();

                    if (opt.isPresent())
                        return opt.get();
                    else {
                        Class<?> def = Object.class;
                        // If we get here, the class wasn't found, either naked or with any imported package prefix
                        System.err.println("Warning: couldn't find type: " + name + "; using " + def + " instead");
                        return def;
                    }
                });

        // Now add the array dimension
        for ( ; arrayDimension > 0; --arrayDimension)
            ret = ret.arrayType();

        return ret;
    }

    public Stream<CandidateMember> allCandidates() {
        return getClassesToSearch().stream()
                .flatMap(c -> Stream.of(
                                  Arrays.stream(c.getDeclaredFields())
                                        .map(CandidateMember::membersFromField)
                                        .flatMap(List::stream)
                                , Arrays.stream(c.getDeclaredConstructors())
                                        .map(CandidateMember::memberFromConstructor)
                                , Arrays.stream(c.getDeclaredMethods())
                                        .map(CandidateMember::memberFromMethod)
                                )
                        .flatMap(Function.identity())
                );
    }

    private final Deque<Function<CandidateMember, Stream<CandidateMember>>> processors = new LinkedList<>();
    public void appendProcessor(Function<CandidateMember, Stream<CandidateMember>> processor) {
        processors.addLast(processor);
    }
    public void prependProcessor(Function<CandidateMember, Stream<CandidateMember>> processor) {
        processors.addFirst(processor);
    }

    protected Function<CandidateMember, Stream<CandidateMember>> filter(Predicate<CandidateMember> pred) {
        return m -> pred.test(m) ? Stream.of(m) : Stream.empty();
    }

    public void appendFilter (Predicate<CandidateMember> pred) { appendProcessor (filter(pred)); }
    public void prependFilter(Predicate<CandidateMember> pred) { prependProcessor(filter(pred)); }

    public Stream<CandidateMember> chainProcessors(Stream<CandidateMember> s) {
        return s.flatMap(processors.stream().reduce(Stream::of, (a,b) -> (m -> a.apply(m).flatMap(b))));
    }
}
